#!/bin/bash
APPLICATION_FOLDER=$1
TARGET="$APPLICATION_FOLDER/target"
ORIGINAL_MESSAGES="$APPLICATION_FOLDER/conf/messages"
MESSAGES_FILE="$APPLICATION_FOLDER/messages_duplicated.txt"
SRC="$APPLICATION_FOLDER/target/scala-2.11/twirl/main"
MESSAGE_COUNT=0
IGNORE_PREFIX=()
RUN_WELSH=false
HELP="Usage: message_check.sh [DIRECTORY]...[OPTION(S)] [OPTION VALUE]...\nMessage check is setup for PLAY Frontend projects with TWIRL to count the number of message keys that are missing from the HTML. The directory provided must be the directory of your application.\nThe original message file must be present in 'conf/messages' and the service must be compiled where the html is stored in 'target/scala-2.11/twirl/main'\n\nOptions:\n  -h, --help\t\tDisplays this help page\n  -i, --ignore\t\tConfigures messages to ignore which start with a given prefix. Passing '--ignore dynamic.key' would ignore all messages that start with 'dynamic.key' from the list of missing messages\n  -w, --welsh\t\tConfigures script to run again for the welsh messages file. The file must be named 'messages.cy'\n  -nc, --no-colour\tConfigures script to run without colour output\n\nExample usage: 'message_check ~/my_service --ignore dynamic.message --ignore error.message'"
#COLORS
RED='\033[0;31m'
NC='\033[0m' # No Color

if [ "$1" == "-h" ] || [ "$1" == "--help" ] ; then 
    echo -e "$HELP"
    exit 0
fi

if [ -z "$APPLICATION_FOLDER" ]; then
    echo "Please pass in an application directory: messages_count ~/my_service"
    exit 1
fi

if [ ! -d "$APPLICATION_FOLDER" ]; then
    echo "Folder [$APPLICATION_FOLDER] not found"
    exit 1
fi

if [ ! -d "$SRC" ]; then
    echo "$APPLICATION_FOLDER is not compiled with twirl sources"
    exit 1
fi

shift
while [[ $# -gt 0 ]]
 do
    key="$1"
    case $key in
        --ignore|-i)
            IGNORE_PREFIX+=("$2")
            shift
            shift;;
        -w | --welsh)
            RUN_WELSH=true
            shift;;
        -nc | --no-colour)
            RED=$NC
            shift;;
        -*)
            echo "Unknown command: $key. Try 'message_check --help' for more information"
            exit 1;;
        *) echo 
            "Unknown argument: $key. Try 'message_check --help' for more information"
            exit 1;;
    esac
done

function run {
    echo "======================================="
    MESSAGE_PATH=$1
    FAILED_MESSAGE_COUNT=0
    MISSING_MESSAGES=""
    printf "\nRunning for $MESSAGE_PATH\n\n"
    cp $MESSAGE_PATH $MESSAGES_FILE

    #REMOVING BLANK LINES
    sed -i '/^$/d' $MESSAGES_FILE
    #remove all lines starting with hash
    sed -i '/^#/ d' $MESSAGES_FILE
    #remove all after =
    sed -i 's/\=.*$//' $MESSAGES_FILE

    MESSAGE_COUNT=$(wc -l < $MESSAGES_FILE)

    for prefix in ${IGNORE_PREFIX[*]} ; do
        sed -i "/^$prefix/ d" $MESSAGES_FILE
    done

    for message in $(cat $MESSAGES_FILE) ; do
        if ! [[ $(grep -rnw $SRC -e $message) ]]; then 
            MISSING_MESSAGES="$MISSING_MESSAGES$message, "
            FAILED_MESSAGE_COUNT=$((FAILED_MESSAGE_COUNT+1))
        fi
    done

    echo "Ignored messgae prefixes: ${IGNORE_PREFIX[*]}"
    echo ""
    printf "Missing messages:\n ${RED}$MISSING_MESSAGES${NC}" | sed -e $'s/,/\\\n/g'
    
    printf "$FAILED_MESSAGE_COUNT missing out of $MESSAGE_COUNT messages\n\n\n"

    rm -f $MESSAGES_FILE
}

run "$ORIGINAL_MESSAGES"
if $RUN_WELSH ; then 
    run "${ORIGINAL_MESSAGES}.cy"
fi

#TODO MAYBE allow pass in verbose to spit out where the message exists
